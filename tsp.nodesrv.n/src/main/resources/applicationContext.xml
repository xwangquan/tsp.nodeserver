<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd

     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd

     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd

     http://www.springframework.org/schema/mvc
     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	<!-- <import resource="config.xml" /> -->
	<!-- 加载配置文件 -->
	<!-- <context:property-placeholder location="dbConfig.properties" /> -->
	<context:property-placeholder location="classpath*:conf/dbConfig.properties" />

	<!-- 指定spring注解注入层 -->
	<context:component-scan base-package="cn.richinfo.tsp.nameserver.persistence" />
	<context:annotation-config />
	<tx:annotation-driven />

	<!-- <bean id="placeholderConfig" class="cn.richinfo.tsp.common.config.PropertiesUtil" 
		init-method="init"> <property name="systemPropertiesMode" value="1" /> <property 
		name="fileEncoding" value="UTF-8" /> <property name="configList" ref="configList" 
		/> </bean> -->

	<!-- 数据库连接池管理 -->
	<!-- common_db -->
	<bean id="dataSource_common" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${common_db.driverClass}"></property>
		<property name="jdbcUrl" value="${common_db.jdbcUrl}"></property>
		<property name="user" value="${common_db.user}"></property>
		<property name="password" value="${common_db.password}"></property>


		<property name="initialPoolSize" value="${common_db.initialPoolSize}"></property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${common_db.maxIdleTime}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${common_db.maxPoolSize}"></property>
		<property name="minPoolSize" value="${common_db.minPoolSize}"></property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${common_db.acquireIncrement}"></property>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${common_db.acquireRetryDelay}"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${common_db.acquireRetryAttempts}"></property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${common_db.breakAfterAcquireFailure}"></property>
	</bean>
	<!-- user_node_db -->
	<bean id="dataSource_user_node" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${user_node_db.driverClass}"></property>
		<property name="jdbcUrl" value="${user_node_db.jdbcUrl}"></property>
		<property name="user" value="${user_node_db.user}"></property>
		<property name="password" value="${user_node_db.password}"></property>


		<property name="initialPoolSize" value="${user_node_db.initialPoolSize}"></property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${user_node_db.maxIdleTime}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${user_node_db.maxPoolSize}"></property>
		<property name="minPoolSize" value="${user_node_db.minPoolSize}"></property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${user_node_db.acquireIncrement}"></property>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="${user_node_db.acquireRetryDelay}"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${user_node_db.acquireRetryAttempts}"></property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="${user_node_db.breakAfterAcquireFailure}"></property>
	</bean>
	<!-- ================================事务相关控制================================================= -->

	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_common"></property>
	</bean>

	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(* cn.richinfo.tsp.nameserver.persistence.service.*.*(..))" /><!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>

	<!-- user node db -->
	<bean id="userNodeSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_user_node" />
		<property name="configLocation" value="MyBatis-Configuration.xml" />
	</bean>
	<bean id="carDrivingService" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface"
			value="cn.richinfo.tsp.nodeserver.persistence.service.CarDrivingService" />
		<property name="sqlSessionFactory" ref="userNodeSessionFactory" />
	</bean>
	<bean id="userVtuService" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface"
			value="cn.richinfo.tsp.nodeserver.persistence.service.UserVtuService" />
		<property name="sqlSessionFactory" ref="userNodeSessionFactory" />
	</bean>
</beans>